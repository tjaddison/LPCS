import { Authority } from "./Authority";
import { Logger } from "./Logger";
import { Storage } from "./Storage";
import { TokenResponse } from "./RequestInfo";
import { User } from "./User";
declare global  {
    interface Window {
        msal: Object;
        CustomEvent: CustomEvent;
        Event: Event;
        activeRenewals: {};
        renewStates: Array<string>;
        callBackMappedToRenewStates: {};
        callBacksMappedToRenewStates: {};
        openedWindows: Array<Window>;
        requestType: string;
    }
}
export interface CacheResult {
    errorDesc: string;
    token: string;
    error: string;
}
export declare type tokenReceivedCallback = (errorDesc: string, token: string, error: string, tokenType: string) => void;
export declare class UserAgentApplication {
    private _cacheLocations;
    private _cacheLocation;
    readonly cacheLocation: string;
    protected _logger: Logger;
    private _loginInProgress;
    private _acquireTokenInProgress;
    private _clockSkew;
    protected _cacheStorage: Storage;
    private _tokenReceivedCallback;
    private _user;
    clientId: string;
    protected authorityInstance: Authority;
    authority: string;
    validateAuthority: boolean;
    private _redirectUri;
    private _postLogoutredirectUri;
    loadFrameTimeout: number;
    protected _navigateToLoginRequestUrl: boolean;
    private _isAngular;
    private _endpoints;
    private _anonymousEndpoints;
    constructor(clientId: string, authority: string | null, tokenReceivedCallback: tokenReceivedCallback, options?: {
        validateAuthority?: boolean;
        cacheLocation?: string;
        redirectUri?: string;
        postLogoutRedirectUri?: string;
        logger?: Logger;
        loadFrameTimeout?: number;
        navigateToLoginRequestUrl?: boolean;
        isAngular?: boolean;
        anonymousEndpoints?: Array<string>;
        endPoints?: Map<string, Array<string>>;
    });
    private processCallBack(hash);
    loginRedirect(scopes?: Array<string>, extraQueryParameters?: string): void;
    loginPopup(scopes: Array<string>, extraQueryParameters?: string): Promise<string>;
    private promptUser(urlNavigate);
    private openWindow(urlNavigate, title, interval, instance, resolve?, reject?);
    private broadcast(eventName, data);
    logout(): void;
    protected clearCache(): void;
    clearCacheForScope(accessToken: string): void;
    private openPopup(urlNavigate, title, popUpWidth, popUpHeight);
    private validateInputScope(scopes);
    private filterScopes(scopes);
    private registerCallback(expectedState, scope, resolve, reject);
    protected getCachedTokenInternal(scopes: Array<string>, user: User): CacheResult;
    private getCachedToken(authenticationRequest, user);
    getAllUsers(): Array<User>;
    private getUniqueUsers(users);
    private getUniqueAuthority(accessTokenCacheItems, property);
    private addHintParameters(urlNavigate, user);
    private urlContainsQueryStringParameter(name, url);
    acquireTokenRedirect(scopes: Array<string>): void;
    acquireTokenRedirect(scopes: Array<string>, authority: string): void;
    acquireTokenRedirect(scopes: Array<string>, authority: string, user: User): void;
    acquireTokenRedirect(scopes: Array<string>, authority: string, user: User, extraQueryParameters: string): void;
    acquireTokenPopup(scopes: Array<string>): Promise<string>;
    acquireTokenPopup(scopes: Array<string>, authority: string): Promise<string>;
    acquireTokenPopup(scopes: Array<string>, authority: string, user: User): Promise<string>;
    acquireTokenPopup(scopes: Array<string>, authority: string, user: User, extraQueryParameters: string): Promise<string>;
    acquireTokenSilent(scopes: Array<string>, authority?: string, user?: User, extraQueryParameters?: string): Promise<string>;
    private loadIframeTimeout(urlNavigate, frameName, scope);
    private loadFrame(urlNavigate, frameName);
    private addAdalFrame(iframeId);
    private renewToken(scopes, resolve, reject, user, authenticationRequest, extraQueryParameters?);
    private renewIdToken(scopes, resolve, reject, user, authenticationRequest, extraQueryParameters?);
    getUser(): User;
    private handleAuthenticationResponse(hash);
    private saveAccessToken(authority, tokenResponse, user, clientInfo, idToken);
    protected saveTokenFromHash(tokenResponse: TokenResponse): void;
    isCallback(hash: string): boolean;
    private getHash(hash);
    protected getRequestInfo(hash: string): TokenResponse;
    private getScopeFromState(state);
    private isInIframe();
    loginInProgress(): boolean;
    private getHostFromUri(uri);
    getScopesForEndpoint(endpoint: string): Array<string>;
    protected setloginInProgress(loginInProgress: boolean): void;
    protected getAcquireTokenInProgress(): boolean;
    protected setAcquireTokenInProgress(acquireTokenInProgress: boolean): void;
    protected getLogger(): Logger;
}
